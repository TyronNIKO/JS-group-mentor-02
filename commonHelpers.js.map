{"version":3,"file":"commonHelpers.js","sources":["../src/main.js"],"sourcesContent":["import { nanoid } from 'nanoid';\n\n//TODO-1\n// Напишіть логіку обробнику подій по сабміту\n// При сабміті треба у змінну записувати значення поля інпута\n// Повинна бути перевірка на порожнє поле.\nconst formEl = document.querySelector('#task-form');\nconst ulEl = document.querySelector('#task-list');\nconst localStorageKey = 'task-key';\n\nformEl.addEventListener('submit', fooSubmit);\n\nfunction fooSubmit(e) {\n  e.preventDefault();\n  const inputValue = e.target.elements.taskName.value.trim();\n  if (!inputValue) {\n    return;\n  }\n  console.log(inputValue);\n  const newId = nanoid(); //=> \"V1StGXR8_Z5jdHi6B-myT\"\n\n  ulEl.insertAdjacentHTML(\n    'beforeend',\n    createLiEl({ text: inputValue, id: newId })\n  );\n  addTask(inputValue, newId);\n  e.target.reset();\n}\n//TODO-2\n// Напишіть логіку яка з сабміта буде брати значення поля інпут\n// Генерувати елемент списку LI  з текстом і кнопкою Х, у майбутньому це буде кнопка видалення таски\n\nfunction createLiEl({ text, id }) {\n  return `<li id=\"${id}\" class =\"task-list-item\">${text}<button type=\"button\">X</button></li>`;\n}\n\n//TODO-3\n// Написати функцію, яка при сабміті буде зберігати данні в сховище, в сховище повинні додаватись таски, а не перезаписуватись існуюча\n\nfunction addTask(inputValue, id) {\n  const arrTask = JSON.parse(localStorage.getItem(localStorageKey)) || [];\n  const obj = { id: id, text: inputValue };\n  arrTask.push(obj);\n  localStorage.setItem(localStorageKey, JSON.stringify(arrTask));\n}\n\n//TODO-4\n//Відформатуйте код таким чином, щоб данні в сховищі зберігались у вигляді об'єкта { id: value, text: value}, розмітка додавалась з айдішніком на елемент списку li, айдішнік генерувати з допомогою бібліотеки nanoid, її треба встановити\n\n//TODO-4\n// Написати функцію, яка буде при завантаженні сторінки відмальовувати розмітку беручи данні з ЛС\nfunction winMarcup() {\n  const arrTask = JSON.parse(localStorage.getItem(localStorageKey));\n  if (!arrTask) return;\n  const marcup = arrTask.map(createLiEl).join('');\n  ulEl.innerHTML = marcup;\n}\nwinMarcup();\n"],"names":["formEl","ulEl","localStorageKey","fooSubmit","e","inputValue","newId","nanoid","createLiEl","addTask","text","id","arrTask","obj","winMarcup","marcup"],"mappings":"svBAMA,MAAMA,EAAS,SAAS,cAAc,YAAY,EAC5CC,EAAO,SAAS,cAAc,YAAY,EAC1CC,EAAkB,WAExBF,EAAO,iBAAiB,SAAUG,CAAS,EAE3C,SAASA,EAAUC,EAAG,CACpBA,EAAE,eAAc,EAChB,MAAMC,EAAaD,EAAE,OAAO,SAAS,SAAS,MAAM,OACpD,GAAI,CAACC,EACH,OAEF,QAAQ,IAAIA,CAAU,EACtB,MAAMC,EAAQC,IAEdN,EAAK,mBACH,YACAO,EAAW,CAAE,KAAMH,EAAY,GAAIC,CAAK,CAAE,CAC9C,EACEG,EAAQJ,EAAYC,CAAK,EACzBF,EAAE,OAAO,OACX,CAKA,SAASI,EAAW,CAAE,KAAAE,EAAM,GAAAC,GAAM,CAChC,MAAO,WAAWA,CAAE,6BAA6BD,CAAI,uCACvD,CAKA,SAASD,EAAQJ,EAAYM,EAAI,CAC/B,MAAMC,EAAU,KAAK,MAAM,aAAa,QAAQV,CAAe,CAAC,GAAK,GAC/DW,EAAM,CAAE,GAAIF,EAAI,KAAMN,CAAU,EACtCO,EAAQ,KAAKC,CAAG,EAChB,aAAa,QAAQX,EAAiB,KAAK,UAAUU,CAAO,CAAC,CAC/D,CAOA,SAASE,GAAY,CACnB,MAAMF,EAAU,KAAK,MAAM,aAAa,QAAQV,CAAe,CAAC,EAChE,GAAI,CAACU,EAAS,OACd,MAAMG,EAASH,EAAQ,IAAIJ,CAAU,EAAE,KAAK,EAAE,EAC9CP,EAAK,UAAYc,CACnB,CACAD,EAAW"}